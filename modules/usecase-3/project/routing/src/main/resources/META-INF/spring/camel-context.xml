<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- H2 DB -->
    <bean id="usecaseDB" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:tcp://localhost/~/usecaseDB"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!-- SQL Component & Datasource -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="usecaseDB"/>
    </bean>

    <!-- Spring JMS TxManager -->
    <bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <!-- JMS ConnectionFactory  -->
    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="redeliveryPolicy">
            <bean class="org.apache.activemq.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="0"/>
            </bean>
        </property>
    </bean>

    <!-- ActiveMQ Camel Component - Tx -->
    <bean id="amq-tx" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="transactionManager" ref="jmsTransactionManager"/>
        <property name="transacted" value="true"/>
    </bean>

    <!-- ActiveMQ Camel Component - No Tx -->
    <bean id="amq-notx" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="tcp://localhost:61616"/>
                <property name="userName" value="admin"/>
                <property name="password" value="admin"/>
            </bean>
        </property>
    </bean>

    <bean id="memoryRepo" class="org.apache.camel.processor.idempotent.MemoryIdempotentRepository"/>

    <camelContext trace="false" xmlns="http://camel.apache.org/schema/spring">

        <propertyPlaceholder id="properties" location="fabric8/route.properties"/>

        <!--
             Transformation Endpoint doing csv2java conversion
             Step 1 : csv record is converted java using camel bindy
             Step 2 : Dozer transformation of Customer to Account
             Step 3 : Java to Json conversion using json jackson
        -->
        <endpoint
                uri="dozer:csv2json?sourceModel=org.acme.Customer&amp;targetModel=org.globex.Account&amp;marshalId=json&amp;unmarshalId=csv&amp;mappingFile=transformation.xml"
                id="csv2json"/>

        <!-- CSV Input & JSon OutPut DataFormat -->
        <dataFormats>
            <bindy id="csv" type="Csv" classType="org.acme.Customer"/>
            <json id="json" library="Jackson"/>
        </dataFormats>

        <onException>
            <exception>java.lang.IllegalArgumentException</exception>
            <handled>
                <constant>false</constant>
            </handled>
            <log message=">> Error took place. Message will be moved to DLQ"/>
            <setHeader headerName="error-code">
                <constant>111</constant>
            </setHeader>
            <setHeader headerName="error-message">
                <simple>${exception.message}</simple>
            </setHeader>
            <setHeader headerName="message">
                <simple>${body}</simple>
            </setHeader>
            <to uri="direct:error"/>
        </onException>

        <!-- Route Definition -->
        <route id="queue-split-transform-queue">
            <!-- Consume messages from queue -->
            <from uri="amq-tx:{{queueInput}}"/>
            <split>
                <tokenize token="\n"/>
                <to ref="csv2json"/>
                <log message="!!!! MESSAGE TO BE PUBLISHED ON THE QUEUE" loggingLevel="DEBUG" logName="org.fuse.usecase" />
                <to uri="amq-notx:{{queueOutput}}" id="output-queue-endpoint"/>
            </split>
        </route>

        <!-- Publish the error code and error message on a topic -->
        <route id="direct-error-queue">
            <from uri="direct:error"/>
            <log loggingLevel="DEBUG" logName="org.fuse.usecase" message="!!!! ERROR NOTIFICATION SEND"/>
            <to uri="amq-notx:{{topicNotification}}" id="error-queue-endpoint"/>
        </route>

        <!-- Consume the Topic message and publish it into the DB -->
        <route id="error-queue-sql">
            <from uri="amq-notx:{{topicNotification}}?clientId=123&amp;durableSubscriptionName=notification"/>
            <log message="!!!! NOTIFICATION RECEIVED" loggingLevel="DEBUG" logName="org.fuse.usecase"  />
            <log message=">> Error code : ${header.error-code}, Error Message : ${header.error-message}" loggingLevel="DEBUG" logName="org.fuse.usecase"/>
            <to uri="sql:insert into USECASE.T_ERROR(ERROR_CODE,ERROR_MESSAGE,MESSAGE,STATUS)
                     values (:#${header.error-code}, :#${header.error-message}, :#${header.message}, 'ERROR');"/>
        </route>

        <!-- Inject correct record/message and update their status to CLOSE -->
        <route id="sql-queue-input">
            <from uri="sql:select MESSAGE, ID from USECASE.T_ERROR where STATUS = 'FIXED' ?consumer.onConsume=update USECASE.T_ERROR set STATUS='CLOSE' where ID = :#ID"/>
            <setBody>
                <simple>${body[message]}</simple>
            </setBody>
            <log message=">> Body : ${body}"/>
            <to uri="amq-tx:{{queueInput}}"/>
        </route>

    </camelContext>
</beans>